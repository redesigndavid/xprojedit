#!/usr/bin/env python
import sys
import argparse

from xprojedit import interface


def test(args):
    """run some test."""
    interface.run_test(args.xcodeprojectpath)


def tree(args):
    """run tree command."""
    print '\n'.join(interface.tree_lines(
        args.xcodeprojectpath, args.no_indent, args.dir_only, args.location))


def find(args):
    """find objects matching regex."""
    print '\n'.join(interface.find_matching_regex(
        args.xcodeprojectpath, args.searchstring, args.location))


def addfolder(args):
    """add folderpath to xcodeproject."""
    interface.add_folder(args.xcodeprojectpath,
                         args.inputpath,
                         args.location)


def addfiles(args):
    """add files to xcodeproject."""
    interface.add_files(args.xcodeprojectpath,
                        args.inputfiles,
                        args.location)


def rmgrp(args):
    interface.remove_location(args.xcodeprojectpath,
                              args.location)


def syncgrp(args):
    interface.sync_location(args.xcodeprojectpath,
                            args.location)


def parse_args(args):
    """return options."""
    description = ("Manipulate pbxproj objects, or xcodeprojects.  "
                   "Please use with CAUTION.  Anything can happen.")
    parser = argparse.ArgumentParser(description=description)

    subcmds = parser.add_subparsers(title="commands")

    # --= test command
    # test_ = subcmds.add_parser("test", help="show test structure.")
    # test_.set_defaults(func=test)
    # test_.add_argument('xcodeprojectpath', help='path to xcodeproject.')

    # --- tree command
    tree_ = subcmds.add_parser("tree", help="show tree structure.")
    tree_.set_defaults(func=tree)
    tree_.add_argument('xcodeprojectpath', help='path to xcodeproject.')
    tree_.add_argument('location', nargs='?', default='/',
                       help='starting location')
    tree_.add_argument('-d', '--directories-only',
                       default=False, action='store_true',
                       dest='dir_only', help='only show directories.')
    tree_.add_argument('-i', '--no-indent',
                       default=False, action='store_true',
                       dest='no_indent', help='print tree w/o indents.')

    # --- find command
    find_ = subcmds.add_parser(
        "find", help="find file or folder in xproj.  accepts regex.")
    find_.set_defaults(func=find)
    find_.add_argument('xcodeprojectpath', help='path to xcodeproject.')
    find_.add_argument('location', nargs='?', default='/',
                       help='starting location')
    find_.add_argument('searchstring', help="regex searchstring")

    # --- addfolder command
    addfolder_ = subcmds.add_parser("addfolder", help="add folder to group.")
    addfolder_.set_defaults(func=addfolder)
    addfolder_.add_argument('xcodeprojectpath', help='path to xcodeproject.')
    addfolder_.add_argument('location', help='where to add folder //root.')
    addfolder_.add_argument('inputpath', help='path to folder on disk to add.')

    # --- addfiles command
    addfiles_ = subcmds.add_parser("addfiles", help="add file/s to group.")
    addfiles_.set_defaults(func=addfiles)
    addfiles_.add_argument('xcodeprojectpath', help='path to xcodeproject.')
    addfiles_.add_argument('location', help='where to add folder //root.')
    addfiles_.add_argument('inputfiles', nargs='+', help='input files to add.')

    # --- rmgrp command
    rmgrp_ = subcmds.add_parser("rmgrp", help="remove group.")
    rmgrp_.set_defaults(func=rmgrp)
    rmgrp_.add_argument('xcodeprojectpath', help='path to xcodeproject.')
    rmgrp_.add_argument('location',
                        help='location of group to remove')

    # --- rmgrp command
    syncgrp_ = subcmds.add_parser("syncgrp", help="removes and adds a group.")
    syncgrp_.set_defaults(func=syncgrp)
    syncgrp_.add_argument('xcodeprojectpath', help='path to xcodeproject.')
    syncgrp_.add_argument('location',
                          help='location of group to re-sync')
    parsed = parser.parse_args(args)
    return parsed


def main(sysargs=sys.argv[1:]):
    options = parse_args(sysargs)
    return options.func(options)

if __name__ == '__main__':
    main()
